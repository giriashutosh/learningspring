1. creation of object and passing it to the another object as a dependency is little bit
   hectic task for multiple objects. to resolve this issue we have the spring container or
   spring framework support. with the help of @Configuration annotated file and includes
   @Bean objects. create application context also.
2. If there are multiple beans with the same name then use the @Primary and @Qualifier
   annotation.
3. POJO vs Java Bean vs Spring Bean
4. In Bean also we are creating the object manually and auto-wiring it to resolve this issue
   we use @Component annotation on a class for which spring will create/manage the object and
   use @ComponentScan to find the path of the component classes for spring.
5. @Primary - bean should be given preferences when multiple candidates qualified.
   @Qualifier - bean should be auto-wired (which name has been specifically mention)
6. Dependency Injection Type - Constructor-based, setter-based, Field
7. @Autowired - Field Injection
8. Setter method- Set Injection
9. create constructor - Constructor Injection @Autowired is not mandatory
10. Dependency Injection - Identify beans, their dependencies and wire them together(IOC)
    10.1 Spring Beans - An object managed by Spring Framework
    10.2 IOC - manage the lifecycle of beans and dependencies
         Types Application Context, BeanFactory
    10.3 Autowiring - Process of wiring in dependencies for a spring bean.
11. @Component use on class and @Bean use on method present in @configuration class
    for autowiring in @component we have 3 options like above
    for autowiring in @Bean method call and method parameters
    @Component bean creation done by spring framework usecase for our own application
    @Bean we need to write the bean creation code. usecase for third party libraries.
12. By default In java there is eager loading for spring beans.
13. @Lazy annotation used for lazy loading.(on demand). err in runtime exception.
14. eager init is always preferred bcz to find errs at app startup. memory consumption less.
15. Spring Beans Scope
    Singleton - one instance per spring IOC container (default), stateless beans
    Prototype - multiple instance per IOC container
    Java singleton(GOF)(per JVM) vs Spring Singleton(per IOC container), stateful beans
16. CDI is the alternative of the Spring annotation.